const crypto = require("crypto");
const { createToken, hashToken } = require("../../Utils/createToken");

describe("Token Utility Functions", () => {
  describe("createToken", () => {
    it("should create a random token of 64 characters", () => {
      const token = createToken();
      expect(typeof token).toBe("string");
      expect(token).toHaveLength(64);
    });

    it("should create unique tokens on each call", () => {
      const token1 = createToken();
      const token2 = createToken();
      expect(token1).not.toEqual(token2);
    });
  });

  describe("hashToken", () => {
    it("should hash a token using sha256", () => {
      const token = "sample-token";
      const hash = hashToken(token);

      // Check hash length and type
      expect(typeof hash).toBe("string");
      expect(hash).toHaveLength(64);

      // Ensure hashing is deterministic
      const expectedHash = crypto.createHash("sha256").update(token).digest("hex");
      expect(hash).toEqual(expectedHash);
    });

    it("should produce different hashes for different tokens", () => {
      const token1 = "token1";
      const token2 = "token2";

      const hash1 = hashToken(token1);
      const hash2 = hashToken(token2);

      expect(hash1).not.toEqual(hash2);
    });
  });

  describe("createToken and hashToken integration", () => {
    it("should hash a token generated by createToken correctly", () => {
      const token = createToken();
      const hash = hashToken(token);

      // Ensure hashing is consistent
      const expectedHash = crypto.createHash("sha256").update(token).digest("hex");
      expect(hash).toEqual(expectedHash);
    });
  });
});
